package fr.kissy;

import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.errors.ApiException;
import com.google.maps.model.AddressComponentType;
import com.google.maps.model.GeocodingResult;
import fr.kissy.model.City;

import java.io.*;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Map;
import java.util.Properties;

/**
 * Created by guillaume on 16/08/2017.
 */
public class GeocodeAllCities {
    public static void main(String[] args) throws IOException, InterruptedException, ApiException {
        final String dataFileName = "city-data.properties";

        Properties data = new Properties();
        if (Paths.get(dataFileName).toFile().exists()) {
            try (InputStream is = new FileInputStream(dataFileName)) {
                data.load(is);
            }
        }

        for (Map.Entry<Object, Object> cityEntry : data.entrySet()) {
            City city = new City((String) cityEntry.getValue());
            if (city.getCity() == null) {
                geocodeCity(data, cityEntry.getKey(), city);
            }
        }

        try (OutputStream os = new FileOutputStream(dataFileName)) {
            data.store(os, "Generated by travel-heatmap");
        }
    }

    private static void geocodeCity(Properties data, Object key, City city) throws ApiException, InterruptedException, IOException {
        System.out.println("Geocoding for country id " + key);
        GeoApiContext context = new GeoApiContext.Builder()
                .apiKey("AIzaSyBjK6kfsgkL__BMCzLANcRej9skK4a0EqM").build();
        GeocodingResult[] results = GeocodingApi.geocode(context, city.getName()).await();
        if (results.length > 0) {
            GeocodingResult bestResult = results[0];
            city.setName(bestResult.formattedAddress);
            city.setLat(bestResult.geometry.location.lat);
            city.setLon(bestResult.geometry.location.lng);
            city.setCity(Arrays.stream(bestResult.addressComponents)
                    .filter(c -> Arrays.stream(c.types)
                            .anyMatch(t -> t.equals(AddressComponentType.ADMINISTRATIVE_AREA_LEVEL_1))
                    ).map(s -> s.longName)
                    .findFirst().orElse(null));
            city.setCountry(Arrays.stream(bestResult.addressComponents)
                    .filter(c -> Arrays.stream(c.types)
                            .anyMatch(t -> t.equals(AddressComponentType.COUNTRY))
                    ).map(s -> s.longName)
                    .findFirst().orElse(null));
            data.put(key, city.toPropertyString());
        }
    }
}
